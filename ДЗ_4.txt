#1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. 
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. 
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.#

from sys import argv

script_name, productivity, rate_per_hour, bonus = argv
print("Name of script: ", script_name)
print('Productivity, hours: ', productivity)
print('Rate per hour: ', rate_per_hour)
print('Bonus: ', bonus)
print('Salary: ', int(productivity) * int(rate_per_hour) + int(bonus))



#2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].#

def task2():
    my_list = [300, 2, 44, 12, 7, 58, 98]
    print(f'Исходный список: {my_list}')

    result_list = [my_list[index] for index in range(1, len(my_list)) if my_list[index] > my_list[index-1]]

    print(f'Результат: {result_list}')

if __name__ == "__main__":
    task2()


#3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.#

result = [element for element in range(20, 240) if element % 20 == 0 or element % 21 == 0]
print(result)


#4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]#

from random import  randint

source_list = [randint(0, 10) for i in range(20)]
print(f'Исходный список: {source_list}')

result = [el for el in source_list if source_list.count(el) == 1]
print(f'В списке не повторяются числа: {result}')


#5. Реализовать формирование списка, используя функцию range() 
и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().#


from functools import reduce

sourse_list = [el for el in range(100, 1001) if el % 2 == 0]  # исходный список

result = reduce(lambda x, y: x*y, sourse_list)
print(result)

#6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, 
а при достижении числа 10 завершаем цикл. Во втором также необходимо 
предусмотреть условие, при котором повторение элементов списка будет прекращено.#

from itertools import count, cycle
import sys

start_from = 10
interable = "ABCDEF"
iterations_count = 0

for el in count(start_from):
    if el > start_from+10:
        break
    print(el)

for el in cycle(interable):
    if el == interable[0]:
        iterations_count += 1
    if iterations_count < 3:
        print(el)
    else:
        break

#7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). 
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.#

from functools import reduce
from itertools import count

def fact(n):
    for i in count(1):
        if i <= n:
            result = reduce(lambda x, y: x*y, range(1, i+1))
            yield result
        else:
            break
for el in fact(10):
    print(el)