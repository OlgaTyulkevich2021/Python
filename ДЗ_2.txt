#1.Создать список и заполнить его элементами различных типов данных. 
Реализовать скрипт проверки типа данных каждого элемента. 
Использовать функцию type() для проверки типа. 
Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.#

(каждый объект - есть объект какого-либо класса ; класс есть тоде объект; любая структура есть объект)


b = ['a', 'b', 1, (1,2,3)]
for element in b:
	print(type(element))


#2. Для списка реализовать обмен значений соседних элементов, 
т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. 
При нечетном количестве элементов последний сохранить на своем месте. 
Для заполнения списка элементов необходимо использовать функцию input().#



input_list = input("Введите через пробел элементы списка: ")
input_list = input_list.split(" ")  # Split - разделение каждого элемента через пробел
print(input_list)
result_list = []
for element in input_list[::2]:
	index = input_list.index(element)
	if index+1 == len(input_list):
		result_list.append(element)
	else:
		first_element, second_element = input_list[index], input_list[index+1]
		result_list.extend([second_element, first_element])

print(result_list)

ИЛИ

input_list = input("Введите через пробел элементы списка: ")
input_list = input_list.split(" ")
for index in range(0, len(input_list)-1, 2):
	input_list[index], input_list[index+1] = input_list[index+1], input_list[index]
print(input_list)



#3. Пользователь вводит месяц в виде целого числа от 1 до 12. 
Сообщить к какому времени года относится месяц (зима, весна, лето, осень). 
Напишите решения через list(список) и через dict (словарь).#

# Через список

month = int(input("Введите месяц в виде целого числа от 1 до 12: "))

winter = [12, 1, 2]
spring = [3, 4, 5]
summer = [6, 7, 8]
autumn = [9, 10, 11]

if month in winter:
    print('Зима')
elif month in spring:
    print('Весна')
elif month in summer:
    print('Лето')
elif month in autumn:
    print('Осень')
else:
    print('Время года не определено')


# Через словарь

month = int(input("Введите месяц в виде целого числа от 1 до 12: "))

seasons_dict = {}
seasons_dict = seasons_dict.fromkeys([12, 1, 2], 'Зима')
seasons_dict.update({}.fromkeys([3, 4, 5], 'Весна'))
seasons_dict.update({}.fromkeys([6, 7, 8], 'Лето'))
seasons_dict.update({}.fromkeys([9, 10, 11], 'Осень'))

for season_month, season in seasons_dict.items():
	if month == season_month:
		print(season)
		break
else:
	print('Время года не определено')



#4. Пользователь вводит строку из нескольких слов, разделённых пробелами. 
Вывести каждое слово с новой строки. Строки необходимо пронумеровать. 
Если в слово длинное, выводить только первые 10 букв в слове.#


input_string = input("Введите предложение: ")
input_words = input_string.split(' ')

for index, word in enumerate(input_words):
	print(index+1, word[:10])



#5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. 
У пользователя необходимо запрашивать новый элемент рейтинга. 
Если в рейтинге существуют элементы с одинаковыми значениями, 
то новый элемент с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].#

my_rating_list = [7, 5, 3, 3, 2]
my_rating_list_copy = my_rating_list.copy()

new_rating = int(input("Введите новый элемент рейтинга: "))
if new_rating > my_rating_list[0]:
	my_rating_list_copy.insert(0, new_rating)
elif new_rating < my_rating_list[-1]:
	my_rating_list_copy.append(new_rating)
else:
	for rating in my_rating_list:
		if new_rating == rating:
			rating_index = my_rating_list.index(rating)
			rating_count = my_rating_list.count(rating)
			new_rang_index = rating_index + rating_count
			my_rating_list_copy.insert(new_rang_index, new_rating)
			break
		elif new_rating > rating:
			my_rating_list_copy.insert(my_rating_list.index(rating), new_rating)
			break
		else:
			continue
print(my_rating_list_copy)



#6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. 
Каждый кортеж хранит информацию об отдельном товаре. 
В кортеже должно быть два элемента — номер товара и словарь с параметрами 
(характеристиками товара: название, цена, количество, единица измерения). 
Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
Пример готовой структуры:
[
(1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
(2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}), 
(3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
]
Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например название, а значение — список значений-характеристик, например список названий товаров.
Пример:
{
“название”: [“компьютер”, “принтер”, “сканер”],
“цена”: [20000, 6000, 2000],
“количество”: [5, 2, 7],
“ед”: [“шт.”]
}#




my_struct_list = [
	(1, {"название": "компьютер", "цена": 20000, "количество": 5, "ед": "шт."}),
    (2, {"название": "принтер", "цена": 6000, "количество": 2, "ед": "шт."}),
    (3, {"название": "сканер", "цена": 2000, "количество": 7, "ед": "шт."})
]

my_result_dict = {}

for structure in my_struct_list:
    struct_number, struct_info_dict = structure
    for key, value in struct_info_dict.items():  # items-возвращает пару ключ-значение
        value_list = my_result_dict.get(key, [])  # извлекаем значение оп ключу или пустой список
        if value not in value_list:
            value_list.append(value)
        my_result_dict[key] = value_list
print(my_result_dict)

